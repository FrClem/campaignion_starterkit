<?php
/**
 * @file
 * Code for the campaignion_donation feature.
 */

include_once 'campaignion_donation.features.inc';

use \Drupal\little_helpers\Webform\Webform;

/**
 * Implements hook_block_info_alter().
 *
 * Hide titles of specified blocks
 */
function campaignion_donation_block_view_alter(&$data, $block) {
  $hide_title_fields = array('field_main_image', 'field_donation_pgbar');

  foreach($hide_title_fields as $field_name) {
    if(isset($block->delta) && $block->delta === $field_name) {
      $data['subject'] = '';
    }
  }
}

/**
 * Implements hook_campaignion_action_info().
 */
function campaignion_donation_campaignion_action_info() {
  $type['donation'] = array(
    'class' => 'Drupal\\campaignion_donation\\ActionType',
    'parameters' => array(
      'thank_you_page' => array(
        'type' => 'thank_you_page',
        'reference' => 'field_thank_you_pages',
      ),
      'recent_supporters' => array(
        'default_text' => t('!supporter_name just donated at !action_title'),
      ),
    ),
  );
  return $type;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Implements hook_form_donation_node_form_alter().
 */
function campaignion_donation_form_donation_node_form_alter(&$form, &$form_state, $form_id) {
  if (empty($form['title']['#default_value'])) {
    $form['title']['#default_value'] = t('Donation');
  }
  $form['title']['#weight'] = 210;

  $source = &$form['field_donation_pgbar']['und'][0]['options']['source'];
  $source['form_key']['#default_value'] = 'donation_amount';
  $source['#access'] = FALSE;
}

/**
 * Implements hook_webform_paymethod_select_method_list_alter().
 *
 * Alters the list of available payment methods based whether the
 * payment interval is recurrent or not
 */
function campaignion_donation_webform_paymethod_select_method_list_alter(&$methods, $payment) {
  $interval = $payment->contextObj->value('donation_interval');
  $recurrent = in_array($interval, array('m', 'y'));

  if ($recurrent) {
    foreach ($methods as $pmid => $method) {
      if (!($method->controller instanceof \Drupal\webform_paymethod_select\PaymentRecurrentController)) {
        unset($methods[$pmid]);
      }
    }
  }
  else {
    foreach ($methods as $pmid => $method) {
      if ($method->name == 'manual_direct_debit') {
        unset($methods[$pmid]);
      }
    }
  }
}

/**
 * Implements hook_form_builder_palette_groups().
 *
 * Display a donation specific palette when editing a donation node.
 */
function campaignion_donation_form_builder_palette_groups($form_type, $form_id) {
  if ($form_type != 'webform') {
    return;
  }
  $palette = array();
  if (!($node = node_load($form_id)) || $node->type == 'donation') {
    $palette['donation'] = array(
      'weight' => -19,
      'title'  => t('Payment data'),
    );
  }
  return $palette;
}

/**
 * Implements hook_form_builder_element_types().
 *
 * Add donation / payment specific types to the donation palette.
 */
function campaignion_donation_form_builder_element_types($form_type, $form_id) {
  if ($form_type != 'webform') {
    return;
  }
  $node = node_load($form_id);
  if ($node->type == 'donation') {
    module_load_include('inc', 'form_builder_webform', 'form_builder_webform.components');
    $types['donation_interval'] = array(
      'properties' => array(
        'default_value',
        'options',
        'multiple',
      ),
      'default'       => array(
        '#options' => array('1' => t('only once'), 'm' => t('monthly'), 'y' => t('yearly')),
        '#default_value' => 'm',
        '#title' => t('Donation interval'),
        '#required' => TRUE,
      ) + _form_builder_webform_default('select', array('aslist' => TRUE, 'multiple' => FALSE)),
      'palette_group' => 'donation',
      'unique'        => TRUE,
      'title'         => t('Donation interval'),
      'weight'        => -98,
    );

    $types['donation_amount'] = array(
      'title'  => t('Donation amount'),
      'weight' => -99,
      'palette_group' => 'donation',
      'unique'        => TRUE,
      'properties'    => array('default_value'),
      'default'       => array(
        '#title' => t('Donation amount'),
        '#default_value' => '[current-page:query:p12]',
        '#required' => TRUE,
      ) + _form_builder_webform_default('textfield'),
    );

    return $types;
  }
}

/**
 * Implements hook_form_builder_element_types_alter().
 *
 * Add paymethod_select to our palette for donations and hide it for other
 * content types.
 */
function campaignion_donation_form_builder_element_types_alter(&$types, $form_type, $form_id) {
  if ($form_type != 'webform') {
    return;
  }
  $node = node_load($form_id);
  if ($node->type == 'donation') {
    $types['paymethod_select']['addable'] = TRUE;
    $types['paymethod_select']['palette_group'] = 'donation';
    $types['currency']['palette_group'] = 'donation';
    $types['currency']['unique'] = TRUE;
  }
  else {
    $types['paymethod_select']['addable'] = FALSE;
  }
}

/**
 * Implements hook_node_prepare().
 */
function campaignion_donation_node_prepare($node) {
  if ($node->type == 'donation' && empty($node->webform['submit_text'])) {
    $node->webform['submit_text'] = t('Donate now!');
  }
}

/**
 * Implements hook_form_webform_client_form_alter().
 */
function campaignion_donation_form_webform_client_form_alter(&$form, &$form_state) {
  $webform = new Webform($form['#node']);
  if ($component = $webform->componentByKey('donation_amount')) {
    $names = array('donation_amount');
    while ($component['pid']) {
      $component = $webform->component($component['pid']);
      array_unshift($names, $component['form_key']);
    }
    if ($element = &drupal_array_get_nested_value($form['submitted'], $names)) {
      // need to check for type select_or_other because if we set our
      // validation, select_or_other will not set its own validation
      // (does not set validation if #element_validate is set already)
      if ($element['#type'] == 'select_or_other') {
        $element['#element_validate'][] = 'select_or_other_element_validate';
      }
      $element['#element_validate'][] = 'campaignion_donation_amount_validate';
    }
  }
}

/**
 * Element validator for donation_amount.
 */
function campaignion_donation_amount_validate($element, &$form_state, $form) {
  $value = &drupal_array_get_nested_value($form_state['values'], $element['#parents']);

  $num = (int) $value;
  if ((string) $num != $value || $num < 1) {
    form_error($element, t('Please enter a whole-numbered amount of at least 1.'));
  }
}

/**
 * Implements hook_element_info_alter().
 */
function campaignion_donation_element_info_alter(&$type) {
  if (!empty($type['select_or_other']['#process'])) {
    $type['select_or_other']['#process'][] = '_campaignion_donation_select_or_other_process';
  }
}

/**
 * Change how select_or_other is displayed for donation_amount components.
 */
function _campaignion_donation_select_or_other_process($element, &$form_state) {
  if (empty($element['#webform_component'])) {
    return $element;
  }
  $is_donation_amount = $element['#webform_component']['form_key'] == 'donation_amount';
  $has_other_option = !empty($element['other']);
  $is_type_radio = $element['#select_type'] == 'radios';

  if ($is_donation_amount && $has_other_option) {
    // add a currency symbol as label
    $element['other']['#title'] = t('Â£');
    unset($element['other']['#title_display']);
    if ($is_type_radio) {
      // always show other textfield (needs opt-out patch for select_or_other)
      $element['#attributes']['class'][] = 'select-or-other-disabled-js';
    }
  }
  return $element;
}
