<?php
/**
 * @file
 * Code for the campaignion_email_to_target feature.
 */

include_once 'campaignion_email_to_target.features.inc';

/**
 * Implements hook_campaignion_action_info().
 */
function campaignion_email_to_target_campaignion_action_info() {
  $types['email_to_target'] = array(
    'class' => 'Drupal\\campaignion_email_to_target\\ActionType',
    'parameters' => array(
      'thank_you_page' => array(
        'type' => 'thank_you_page',
        'reference' => 'field_thank_you_pages',
      ),
      'recent_supporters' => array(
        'default_text' => t('!supporter_name just signed !action_title'),
      ),
      'email_to_target' => [
        'message_field' => 'field_email_to_target_message',
        'options_field' => 'field_email_to_target_options',
      ],
    ),
  );
  return $types;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Implements hook_form_email_to_target_node_form_alter().
 */
function campaignion_email_to_target_form_email_to_target_node_form_alter(&$form, &$form_state, $form_id) {
  if (empty($form['title']['#default_value'])) {
    $form['title']['#default_value'] = t('Petition');
  }
}

/**
 * Stub for listing all datasets.
 */
function _campaignion_email_to_target_datasets() {
  $datasets = [];
  $ds = new stdclass();
  $ds->fields = [
    'first_name' => ['name' => t('First name'), 'description' => ''],
    'last_name' => ['name' => t('Last name'), 'description' => ''],
    'title' => ['name' => t('Title'), 'description' => ''],
    'email' => ['name' => t('Email address'), 'description' => ''],
  ];
  $ds->name = t('Members of Parliament');
  $datasets['mp'] = $ds;
  return $datasets;
}

function campaignion_email_to_target_tokens_dataset_hint($set_ds = NULL, $reset = FALSE) {
  if ($reset) {
    drupal_static_reset(__FUNCTION__);
  }
  $ds = &drupal_static(__FUNCTION__, NULL);
  if ($set_ds) {
    $ds = $set_ds;
  }
  if (!$ds && ($node = menu_get_object())) {
    // @TODO: Get config field-name from action-type and set value based on node config.
    return 'mp';
  }
  return $ds;
}

/**
 * Implements hook_token_info().
 */
function campaignion_email_to_target_token_info() {
  $info = [];
  if ($ds_name = campaignion_email_to_target_tokens_dataset_hint()) {
    $dataset = _campaignion_email_to_target_datasets()[$ds_name];
    $type = 'email-to-target';
    $info['types'][$type] = [
      'name' => t('Email-to-Target dataset: %name', ['%name' => $dataset->name]),
      'description' => t('Replace values based on the selected target(s).'),
    ];
    foreach ($dataset->fields as $field_name => $field) {
      $info['tokens'][$type][$field_name] = [
        'name' => $field['name'],
        'description' => $field['description'],
      ];
    }
  }
  return $info;
}

/**
 * Implements hook_libraries_info().
 */
function campaignion_email_to_target_libraries_info() {
  $libraries['dflydev-hawk'] = [
    'name' => 'Hawk — A PHP Implementation',
    'vendor url' => 'https://github.com/dflydev/dflydev-hawk',
    'download url' => 'https://github.com/dflydev/dflydev-hawk',
    'version' => '0.0.0',
    'xautoload' => function($adapter) {
       $adapter->composerJson('composer.json');
    },
    'dependencies' => ['RandomLib (>=1.0)'],
  ];
  $libraries['RandomLib'] = [
    'name' => 'RandomLib — A library for generating random numbers and strings of various strengths.',
    'vendor url' => 'https://github.com/ircmaxell/RandomLib',
    'download url' => 'https://github.com/ircmaxell/RandomLib',
    'version' => '1.1.0',
    'xautoload' => function($adapter) {
       $adapter->composerJson('composer.json');
    },
    'dependencies' => ['SecurityLib (>=1.1)'],
  ];
  $libraries['SecurityLib'] = [
    'name' => 'SecurityLib',
    'vendor url' => 'https://github.com/ircmaxell/SecurityLib',
    'download url' => 'https://github.com/ircmaxell/SecurityLib',
    'version' => '1.1.0',
    'xautoload' => function($adapter) {
       $adapter->composerJson('composer.json');
    },
  ];
  return $libraries;
}
