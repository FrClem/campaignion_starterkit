<?php
/**
 * @file
 * Code for the campaignion_email_protest feature.
 */

include_once 'campaignion_email_protest.features.inc';

use \Drupal\campaignion_wizard\EmailProtestEmailStep;

/**
 * Implements hook_form_(form_id)_alter().
 *
 * We're setting a form submit handler that is called before webform_client_form.
 */
function campaignion_email_protest_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#node']->type == 'email_protest') {
    // Add our own submit-handler right before webform_client_form_submit.
    $submit = array();
    foreach ($form['#submit'] as $handler) {
      if ($handler == 'webform_client_form_submit') {
        $submit[] = 'campaignion_email_protest_pre_webform_client_form_submit';
      }
      $submit[] = $handler;
    }
    $form['#submit'] = $submit;
  }
}

/**
 * Helper function that changes webform email data that we can't set anywhere else
 *
 * 1) webform doesn't support loading the target email address from a redhen contact
 * 2) webform doesn't support putting together the email from name from 2 form fields
 *    (first_name, last_name)
 * 3) webform doesn't support loading the body from a form field
 */
function campaignion_email_protest_pre_webform_client_form_submit(&$form, &$form_state) {
  if (   ($form_state['webform']['page_count'] != $form_state['webform']['page_num'])
      || empty($form_state['submitted'])
      || !empty($form_state['save_draft'])) {
    return;
  }

  $node = $form['#node'];
  $submission = new \Drupal\little_helpers\Webform\FormState($node, $form, $form_state);
  if (isset($node->webform['emails'][EmailProtestEmailStep::WIZARD_PROTEST_EID])) {
    $email = &$node->webform['emails'][EmailProtestEmailStep::WIZARD_PROTEST_EID];
  }
  else {
    return;
  }

  $target_contact_id = $submission->valueByKey('email_protest_target');

  $targets = array();
  if ($target_contact_id == FALSE) {
    // no protest target is submitted that means we have to get the targets from the node
    // field
    $protest_targets = field_get_items('node', $form['#node'], 'field_protest_target');
    if ($protest_targets) {
      foreach($protest_targets as $target) {
        if ($contact = redhen_contact_load($target['target_id'])) {
          $items = field_get_items('redhen_contact', $contact, 'redhen_contact_email');
          $targets[] = $items[0]['value'];
        }
      }
    }
  }
  else {
    // the user selected a target that we can get from the form_state
    if ($contact = redhen_contact_load($target_contact_id)) {
      $items = field_get_items('redhen_contact', $contact, 'redhen_contact_email');
      $targets = $items[0]['value'];
    }
  }

  if ($targets) {
    $email['email']     = is_array($targets) ? implode(',', $targets) : $targets;
    $email['from_name'] = $submission->valueByKey('first_name') . ' ' . $submission->valueByKey('last_name');
    $email['template']  = $submission->valueByKey('email_body');
    $root_node = $node;
    if ($node->tnid != 0 && $node->tnid != $node->nid) {
      $root_node = node_load($node->tnid);
    }
    $email['headers'] = array(
      'X-Mail-Domain' => variable_get('site_mail_domain', 'supporter.campaignion.org'),
      'X-Action-UUID' => $root_node->uuid,
    );
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function campaignion_email_protest_theme_registry_alter(&$theme_registry) {
  $theme_registry['webform_mail_headers']['theme path'] = drupal_get_path('module', 'campaignion_email_protest');
  $theme_registry['webform_mail_headers']['function']   = 'campaignion_email_protest_webform_mail_headers';
}

function campaignion_email_protest_webform_mail_headers($variables) {
  $headers = array(
    'X-Mailer' => 'Drupal Webform (PHP/' . phpversion() . ')',
  );
  if (!empty($variables['email']['headers']['X-Mail-Domain'])) {
    $headers['X-Mail-Domain'] = $variables['email']['headers']['X-Mail-Domain'];
  }
  if (!empty($variables['email']['headers']['X-Action-UUID'])) {
    $headers['X-Action-UUID'] = $variables['email']['headers']['X-Action-UUID'];
  }
  return $headers;
}

/**
 * Implements hook_campaignion_action_info().
 */
function campaignion_email_protest_campaignion_action_info() {
  $type['email_protest'] = array(
    'class' => 'Drupal\\campaignion_email_protest\\ActionType',
    'parameters' => array(
      'thank_you_page' => array(
        'type' => 'thank_you_page',
        'reference' => 'field_thank_you_pages',
      ),
      'recent_supporters' => array(
        'default_text' => t('!supporter_name just took action at !action_title'),
      ),
    ),
  );
  return $type;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Implements hook_form_email_protest_node_form_alter().
 */
function campaignion_email_protest_form_email_protest_node_form_alter(&$form, &$form_state, $form_id) {
  if (empty($form['title']['#default_value'])) {
    $form['title']['#default_value'] = t('Email Protest');
  }
  $form['title']['#weight'] = 210;

  if (!empty($form_state['#wizard_type'])) {
    $form['field_protest_target_options']['#access'] = FALSE;
    $form['field_protest_target']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_builder_palette_groups().
 */
function campaignion_email_protest_form_builder_palette_groups($form_type, $form_id) {
  if ($form_type != 'webform') {
    return;
  }
  $palette = array();
  if (!($node = node_load($form_id)) || $node->type == 'email_protest') {
    $palette['email_protest'] = array(
      'weight' => -18,
      'title'  => t('Email Protest Data'),
    );
  }
  return $palette;
}

/**
 * Implements hook_form_builder_element_types().
 */
function campaignion_email_protest_form_builder_element_types($form_type, $form_id) {
  if ($form_type != 'webform') {
    return;
  }
  module_load_include('inc', 'form_builder_webform', 'form_builder_webform.components');
  if (!($node = node_load($form_id)) || $node->type == 'email_protest') {
    $fields['email_subject'] = array(
      'title' => t('Email subject'),
      'weight' => -70,
      'palette_group' => 'email_protest',
      'unique'        => TRUE,
      'properties'    => array('default_value'),
      'default'       => array(
        '#title' => t('Email subject'),
        '#default_value' => '',
      ) + _form_builder_webform_default('textfield'),
    );

    $fields['email_body'] = array(
      'title'  => t('Email body'),
      'weight' => -60,
      'palette_group' => 'email_protest',
      'unique'        => TRUE,
      'properties'    => array('default_value'),
      'default'       => array(
        '#title' => t('Email body'),
        '#default_value' => '',
      ) + _form_builder_webform_default('textarea'),
    );
    return $fields;
  }
}

/**
 * Implements hook_form_builder_element_types_alter().
 */
function campaignion_email_protest_form_builder_element_types_alter(&$types, $form_type, $form_id) {
  if ($form_type != 'webform') {
    return;
  }
  if (!($node = node_load($form_id)) || $node->type == 'email_protest') {
    $types['protest_target']['palette_group'] = 'email_protest';
    $types['protest_target']['addable'] = TRUE;
  }
}
